// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/calc/add": {
            "post": {
                "consumes": [
                    "application/json",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "calc"
                ],
                "summary": "Adds top two numbers from the stack of calculators memory",
                "operationId": "calcAdd",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.calcResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request.",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    }
                }
            }
        },
        "/calc/div": {
            "post": {
                "consumes": [
                    "application/json",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "calc"
                ],
                "summary": "Divides top two numbers from the stack of calculators memory",
                "operationId": "calcDiv",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.calcResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request.",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    }
                }
            }
        },
        "/calc/multip": {
            "post": {
                "consumes": [
                    "application/json",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "calc"
                ],
                "summary": "Multiplies top two numbers from the stack of calculators memory",
                "operationId": "calcMultip",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.calcResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request.",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    }
                }
            }
        },
        "/calc/subs": {
            "post": {
                "consumes": [
                    "application/json",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "calc"
                ],
                "summary": "Subtracts top two numbers from the stack of calculators memory",
                "operationId": "calcSubs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.calcResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request.",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    }
                }
            }
        },
        "/stack": {
            "get": {
                "consumes": [
                    "application/json",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stack"
                ],
                "summary": "Prints all numbers from stack",
                "operationId": "stackFetch",
                "responses": {
                    "200": {
                        "description": "Succesfully printed stack"
                    },
                    "400": {
                        "description": "Bad request.",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stack"
                ],
                "summary": "Adds a number to the stack",
                "operationId": "stackAdd",
                "parameters": [
                    {
                        "description": "Number to add to the stack",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/web.stackPushRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Succesfully added number to stack"
                    },
                    "default": {
                        "description": "Internal server error"
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stack"
                ],
                "summary": "Pops a number from the stack",
                "operationId": "stackPop",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.stackPopResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request.",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/web.errorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "web.calcResponse": {
            "type": "object",
            "required": [
                "result"
            ],
            "properties": {
                "result": {
                    "type": "integer"
                }
            }
        },
        "web.errorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "type": "string"
                }
            }
        },
        "web.stackPopResponse": {
            "type": "object",
            "properties": {
                "popped_number": {
                    "type": "integer"
                }
            }
        },
        "web.stackPushRequest": {
            "type": "object",
            "properties": {
                "number": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Roosh API",
	Description:      "Roosh's API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
